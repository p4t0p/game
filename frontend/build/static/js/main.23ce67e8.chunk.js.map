{"version":3,"sources":["containers/AppContainer/index.js","index.js"],"names":["Field","field","makeMove","turn","React","useState","activeCell","setActiveCell","rows","map","row","j","className","key","cell","i","id","cellColor","kind","color","cid","onClick","split","Number","y","x","select","AppContainer","localStorage","getItem","data","setData","Boolean","isLoading","setIsisLoading","start","fetch","method","then","r","json","catch","error","console","useEffect","_from","_to","headers","body","JSON","stringify","move","from","to","alert","APP_ROOT_ID","renderApp","render","document","getElementById"],"mappings":"4tFAIA,SAASA,EAAT,GAAyC,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,SAAUC,EAAO,EAAPA,KAAO,EACAC,IAAMC,SAAS,MADf,mBAC7BC,EAD6B,KACjBC,EADiB,KA0B9BC,EAAOP,EAAMQ,KAAI,SAACC,EAAKC,GACzB,OACI,yBAAKC,UAAU,MAAMC,IAAK,IAAMF,GAE5BD,EAAID,KAAI,SAACK,EAAMC,GACX,IAAMC,EAAE,YAAQL,EAAR,YAAaI,GACfE,EAAYN,EAAI,EAAKI,EAAI,EAAI,QAAU,QAAYA,EAAI,EAAI,QAAU,QACrEH,EAAS,eAAWE,GAAQA,EAAKI,KAAxB,YAAgCJ,GAAQA,EAAKK,MAA7C,eAAyDF,EAAzD,YAAsEX,GAAcA,EAAW,KAAOU,EAAK,SAAW,IACrI,OAAO,yBAAKH,IAAKG,EAAII,IAAKJ,EAAIJ,UAAWA,EAAWS,QAAS,kBA/B9D,SAACL,EAAIF,GAChB,IAAKR,GAAeQ,KAGfR,GAAcQ,EAAKK,QAAUhB,GAGlC,GAAIG,GAAcU,IAAOV,EAAW,GAChCC,EAAc,WAEd,GAAID,EAAY,CAAC,IAAD,EACMU,EAAGM,MAAM,KAAKb,IAAIc,QADxB,mBACFC,GADE,WACCC,EADD,KAEZvB,EACI,CAACuB,EAAGnB,EAAW,GAAGmB,EAAGD,EAAGlB,EAAW,GAAGkB,GACtC,CAACC,IAAGD,MAERjB,EAAc,WAEdA,EAAc,CAACS,EAAIF,IAaoDY,CAAOV,EAAIF,aAO9F,OACI,yBAAKF,UAAS,gBAAWN,GAAc,SAAzB,iBAA0CH,IACnDK,GAKE,SAASmB,IAAgB,IAAD,EACXvB,IAAMC,SAASuB,aAAaC,QAAQ,SADzB,mBAC5BC,EAD4B,KACtBC,EADsB,OAEC3B,IAAMC,UAAU2B,QAAQF,IAFzB,mBAE5BG,EAF4B,KAEjBC,EAFiB,KAI7BC,EAAQ,WACVD,GAAe,GACXE,MAAM,6BAA8B,CAACC,OAAQ,SACxCC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAR,GACFC,EAAQD,GACRI,GAAe,MAElBO,OAAM,SAAAC,GACHC,QAAQD,MAAMA,OA+B9B,OA3BAtC,IAAMwC,WAAU,WACPd,GAAiB,OAATA,GACTK,MAEL,IAuBCF,EACO,uCAIP,yBAAKrB,UAAU,gBACX,4BAAQS,QAASc,GAAjB,2DACA,kBAACnC,EAAD,CAAOC,MAAO6B,EAAK7B,MAAOE,KAAM2B,EAAK3B,KAAMD,SA5BnD,SAAkB2C,EAAOC,GACrBZ,GAAe,GACfE,MAAM,6BAA8B,CAChCC,OAAQ,OACRU,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAL,KAAmBpB,EAAnB,CAAyBqB,KAAM,CACjCC,KAAMP,EACNQ,GAAIP,QAGPR,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAR,GACEA,EAAKY,MACLY,MAAMxB,EAAKY,OAEXX,EAAQD,GAEZI,GAAe,U,0CCrF/B,IAAMqB,EAAc,mBAEb,SAASC,IACZC,iBAAO,kBAAC9B,EAAD,MAAkB+B,SAASC,eAAeJ,IAGrDC,M","file":"static/js/main.23ce67e8.chunk.js","sourcesContent":["import React, {Suspense} from 'react';\n\nimport './style.scss';\n\nfunction Field({field, makeMove, turn}) {\n    const [activeCell, setActiveCell] = React.useState(null);\n\n    const select = (id, cell) => {\n        if (!activeCell && !cell) {\n            return;\n        }\n        if (!activeCell && cell.color !== turn) {\n            return\n        }\n        if (activeCell && id === activeCell[0]) {\n            setActiveCell(null)\n        } else {\n            if (activeCell) {\n                const [_, y, x] = id.split('.').map(Number);\n                makeMove(\n                    {x: activeCell[1].x, y: activeCell[1].y},\n                    {x, y}\n                )\n                setActiveCell(null)\n            } else {\n                setActiveCell([id, cell]);\n            }\n        }\n    }\n\n    const rows = field.map((row, j) => {\n        return (\n            <div className=\"Row\" key={'r' + j}>\n            {\n                row.map((cell, i) => {\n                    const id = `C.${j}.${i}`\n                    const cellColor = j % 2 ? (i % 2 ? 'white' : 'black') : (i % 2 ? 'black' : 'white');\n                    const className = `Cell ${cell && cell.kind} ${cell && cell.color} bg-${cellColor} ${activeCell && activeCell[0] === id ? 'active' : ''}`;\n                    return <div key={id} cid={id} className={className} onClick={() => select(id, cell)} />\n                })\n            }\n            </div>\n        );\n    });\n\n    return (\n        <div className={`Field ${activeCell && 'active'} turn-${turn}`}>\n            {rows}\n        </div>\n    );\n}\n\nexport default function AppContainer() {\n    const [data, setData] = React.useState(localStorage.getItem('data'))\n    const [isLoading, setIsisLoading] = React.useState(!Boolean(data));\n\n    const start = () => {\n        setIsisLoading(true);\n            fetch('http://localhost:8080/game', {method: 'POST'})\n                .then(r => r.json())\n                .then(data => {\n                    setData(data)\n                    setIsisLoading(false);\n                })\n                .catch(error => {\n                    console.error(error);\n                })\n    }\n\n    React.useEffect(() => {\n        if (!data || data === null) {\n            start();\n        }\n    }, []);\n\n    function makeMove(_from, _to) {\n        setIsisLoading(true);\n        fetch('http://localhost:8080/move', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json'},\n            body: JSON.stringify({...data, move: {\n                from: _from,\n                to: _to,\n            }})\n        })\n            .then(r => r.json())\n            .then(data => {\n                if (data.error) {\n                    alert(data.error)\n                } else {\n                    setData(data)\n                }\n                setIsisLoading(false);\n            })\n    }\n\n    if (isLoading) {\n        return <h1>Loading</h1>\n    }\n\n    return (\n        <div className=\"AppContainer\">\n            <button onClick={start}>Новая игра</button>\n            <Field field={data.field} turn={data.turn} makeMove={makeMove} />\n        </div>\n\n    )\n}\n","import 'core-js';\n\nimport React from 'react';\nimport {render} from 'react-dom';\n\nimport AppContainer from './containers/AppContainer';\n\nconst APP_ROOT_ID = 'application_root';\n\nexport function renderApp() {\n    render(<AppContainer />, document.getElementById(APP_ROOT_ID));\n}\n\nrenderApp()\n\n"],"sourceRoot":""}